#!/usr/bin/env node

const path = require("path");
const os = require("os");

process.title = 'cocosDownloadBuilder';

var cmd = require("commander");

cmd
    .option("-m, --mode [value]",    "Operation mode [ pack|check ]", "pack")
    .option("-d, --debug [value]",   "Switching the debug output", false)
    .option("-n, --name [value]",    "Set output directory name, default is 'Builder'", "Builder")
    .option("-v, --version [value]", "Settings need to be packaged engine version", "v3.12")
    .parse(process.argv);

cmd.temp = os.tmpdir();
cmd.dir = process.cwd();

console.log("");
console.log("  current:");
console.log("    mode     -  %s", cmd.mode.toString());
console.log("    debug    -  %s", cmd.debug.toString());
console.log("    version  -  %s", cmd.version.toString());
console.log("    out dir  -  %s", path.join(cmd.dir, cmd.name));

//检查包以及文件完整性
var check = require('../lib/check');
var zip = require('../lib/zip');
if(cmd.mode === "pack"){
    //开始压缩
    zip.grunt()
}else if(cmd.mode === "check"){
    console.log("");
    console.log("  checking: version supports");
    console.log("");
    check.version();
    console.log("    finish...");
    console.log("");
    console.log("  checking: the legitimacy of the module definition file");
    console.log("");
    check.module2engine();
    console.log("    finish...");
    console.log("");
    console.log("  checking: not defined in module file");
    console.log("");
    check.engine2module();
    console.log("    finish...");
    console.log("");
}else{
    console.log("");
    console.log("  error: Unrecognized mode");
    console.log("");
    console.log("  Pattern list can support:");
    console.log("    pack    Run the packaging procedure");
    console.log("    check   Execute only check module and the edition");
    console.log("");
}